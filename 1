C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\libnvvp;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.1\bin;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.1\libnvvp;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\UCRT\;C:\Program Files\Intel\UCRT\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\PuTTY\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Git\cmd;D:\dev\tool\kubectl;


C:\Program Files\Java\jdk1.8.0_191\bin;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\libnvvp;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.1\bin;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.1\libnvvp;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\UCRT\;C:\Program Files\Intel\UCRT\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\PuTTY\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Git\cmd;D:\dev\tool\kubectl;


--------------------------------------------------------------------------


https://github.com/cloudz-labs/awesome-media.git

actuator 적용시
application.properties 키 하나 반영
management.security.enabled=false

http://localhost:8080/beans
env
health

--------------------------------------------------------------------------

openjdk 이미지를  from 이미지를 생성하고 컨테이너를 구동한다.
컨테이너에 직접 접속하여 apt-get 으로 Tomcat 설치하고 설정한다.
통재로 컨테이너를 이미지로 변환 생성한다.

하지만 PURE 하게 Tomcat 이미지를 사용하는 것을 권장한다.

-------------------------------------------------------------------------

localhost:8090/h2-console/test.do?jsessionid=4ccb23cabd063064cde1c3da6f108251

https://github.com/cloudz-labs/awesome-media/blob/master/docs/%5BCloudZ Labs%5D1일차. spring-boot-training-k8s-intermediate.pdf

https://hub.docker.com/r/dtlabs/

https://myshare.skcc.com/display/CNADOC

https://hub.docker.com/r/dtlabs/awesome-media-backend/tags/

https://myshare.skcc.com/display/CNADOC/10.Spring+Cloud+Service

--------------------------------------------------------------------------

replica 를  deployment  가 현재 그 역할을 대신하고 있다.
 -  pod 생성 역할
 - 따라서 replica 는 몰라도 될 것 같음

replica 를 2 로 설정하면 2개의 pod를 생성함

--------------------------------------------------------------------------

apiVersion: v1
kind: Service
metadata:
  name: awesome-media-backend-service
spec:
  ports:
  - name: "http"
    port: 8090
    targetPort: 8090
  selector:
    app: awesome-media-backend	<--- 여기까지만 작성하면 로드밸런싱만 된다.
  type: NodePort	<--- Node 로 들어오는 외부 요청 포트를 내부 Pod 컨테이너의 8090  포트로 바인딩 시켜서 외부에서도 접근되도록 한다.

--------------------------------------------------------------------------

Pod 의 Private IP 와 Port 는 가상의 내부 설정일 뿐이며 실제적으로는 Node 의 (Public IP 의)포트가 물리 포트이다.

VM 의 가상 포트를 PC 의 Public IP  의 포트로 바인딩하는 것이다.

--------------------------------------------------------------------------

apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: awesome-media-backend-deployment
  labels:
    app: awesome-media-backend	<-- 그냥 동일하게 라벨 줌

*. Label 로 Pod 를 찾기 위한 영역
spec:
  replicas: 1
  selector:
    matchLabels:
      app: awesome-media-backend

*. Pod 영역(Label 명시)
  template:
    metadata:
      labels:
        app: awesome-media-backend
    spec:
      containers:
      - name: awesome-media-backend
        image: dtlabs/awesome-media-backend:1.0
        ports:
        - containerPort: 8090
        imagePullPolicy: Always
        resources:
          requests:
            memory: "256Mi"
            cpu: "50m"
          limits: 
            memory: "1Gi" 
            cpu: "500m"

--------------------------------------------------------------------------

Work Node 는 여러 대의 물리 서버로 떠 있지만
그 중 어떤 하나의 Work Node IP 접근하더라도 해당 서비스 -> POD -> Container 로 접근된다.

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
























